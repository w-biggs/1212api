using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Npgsql;

// Autogenerated

namespace _1212api
{
    public partial class _1212Context : DbContext
    {
        public _1212Context()
        {
        }

        public _1212Context(DbContextOptions<_1212Context> options)
            : base(options)
        {
        }

        public virtual DbSet<Coach> Coaches { get; set; } = null!;
        public virtual DbSet<CoachMetricsGame> CoachMetricsGames { get; set; } = null!;
        public virtual DbSet<ConfDivHistory> ConfDivHistories { get; set; } = null!;
        public virtual DbSet<Conference> Conferences { get; set; } = null!;
        public virtual DbSet<Division> Divisions { get; set; } = null!;
        public virtual DbSet<Game> Games { get; set; } = null!;
        public virtual DbSet<GameTeam> GameTeams { get; set; } = null!;
        public virtual DbSet<GameTeamStats> GameTeamStats { get; set; } = null!;
        public virtual DbSet<GameThread> GameThreads { get; set; } = null!;
        public virtual DbSet<GameThreadTeam> GameThreadTeams { get; set; } = null!;
        public virtual DbSet<Level> Levels { get; set; } = null!;
        public virtual DbSet<Play> Plays { get; set; } = null!;
        public virtual DbSet<Season> Seasons { get; set; } = null!;
        public virtual DbSet<Team> Teams { get; set; } = null!;
        public virtual DbSet<TeamDivHistory> TeamDivHistories { get; set; } = null!;
        public virtual DbSet<TeamMetricsGame> TeamMetricsGames { get; set; } = null!;
        public virtual DbSet<TeamMetricsSeason> TeamMetricsSeasons { get; set; } = null!;
        public virtual DbSet<Week> Weeks { get; set; } = null!;

        public static void RegisterTypes()
        {
            NpgsqlConnection.GlobalTypeMapper.MapEnum<OffenseScheme>()
                .MapEnum<PlayType>()
                .MapEnum<Result>()
                .MapEnum<Timeout>();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseNpgsql("Name=ConnectionStrings:1212api");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasPostgresEnum<DefenseScheme>()
                .HasPostgresEnum<OffenseScheme>()
                .HasPostgresEnum<PlayType>()
                .HasPostgresEnum<Result>()
                .HasPostgresEnum<Timeout>();

            modelBuilder.Entity<Coach>(entity =>
            {
                entity.ToTable("Coach");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PrimaryUsername).HasColumnName("primaryUsername");

                entity.Property(e => e.Usernames).HasColumnName("usernames");
            });

            modelBuilder.Entity<CoachMetricsGame>(entity =>
            {
                entity.HasKey(e => new { e.TeamId, e.GameId, e.CoachId })
                    .HasName("CoachMetricsGame_pkey");

                entity.ToTable("CoachMetricsGame");

                entity.HasIndex(e => new { e.TeamId, e.GameId }, "CoachMetricsGame_teamId_gameId_key")
                    .IsUnique();

                entity.Property(e => e.TeamId).HasColumnName("teamId");

                entity.Property(e => e.GameId).HasColumnName("gameId");

                entity.Property(e => e.CoachId).HasColumnName("coachId");

                entity.Property(e => e.Elo).HasColumnName("elo");

                entity.Property(e => e.OldElo).HasColumnName("oldElo");
                
                entity.HasOne(d => d.Coach)
                    .WithMany(p => p.CoachMetricsGames)
                    .HasForeignKey(d => d.CoachId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("CoachMetricsGame_coachId_fkey");

                entity.HasOne(d => d.GameTeam)
                    .WithMany(p => p.CoachMetricsGames)
                    .HasForeignKey(d => new { d.TeamId, d.GameId })
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("CoachMetricsGame_teamId_gameId_fkey");
            });

            modelBuilder.Entity<ConfDivHistory>(entity =>
            {
                entity.HasKey(e => new { e.ConferenceId, e.DivisionId, e.SeasonNo })
                    .HasName("ConfDivHistory_pkey");

                entity.ToTable("ConfDivHistory");

                entity.Property(e => e.ConferenceId).HasColumnName("conferenceId");

                entity.Property(e => e.DivisionId).HasColumnName("divisionId");

                entity.Property(e => e.SeasonNo).HasColumnName("seasonNo");

                entity.HasOne(d => d.Conference)
                    .WithMany(p => p.ConfDivHistories)
                    .HasForeignKey(d => d.ConferenceId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ConfDivHistory_conferenceId_fkey");

                entity.HasOne(d => d.Division)
                    .WithMany(p => p.ConfDivHistories)
                    .HasForeignKey(d => d.DivisionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ConfDivHistory_divisionId_fkey");

                entity.HasOne(d => d.SeasonNoNavigation)
                    .WithMany(p => p.ConfDivHistories)
                    .HasForeignKey(d => d.SeasonNo)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ConfDivHistory_seasonNo_fkey");
            });

            modelBuilder.Entity<Conference>(entity =>
            {
                entity.ToTable("Conference");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ConfName)
                    .HasMaxLength(255)
                    .HasColumnName("confName");

                entity.Property(e => e.LevelId).HasColumnName("levelId");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(50)
                    .HasColumnName("shortName");

                entity.HasOne(d => d.Level)
                    .WithMany(p => p.Conferences)
                    .HasForeignKey(d => d.LevelId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("Conference_levelId_fkey");
            });

            modelBuilder.Entity<Division>(entity =>
            {
                entity.ToTable("Division");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ConferenceId).HasColumnName("conferenceId");

                entity.Property(e => e.DivName)
                    .HasMaxLength(255)
                    .HasColumnName("divName");

                entity.HasOne(d => d.Conference)
                    .WithMany(p => p.Divisions)
                    .HasForeignKey(d => d.ConferenceId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("Division_conferenceId_fkey");
            });

            modelBuilder.Entity<Game>(entity =>
            {
                entity.ToTable("Game");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsNeutral).HasColumnName("isNeutral");

                entity.Property(e => e.SeasonNo).HasColumnName("seasonNo");

                entity.Property(e => e.WeekNo).HasColumnName("weekNo");

                entity.HasOne(d => d.Week)
                    .WithMany(p => p.Games)
                    .HasForeignKey(d => new { d.WeekNo, d.SeasonNo })
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("Game_weekNo_seasonNo_fkey");
            });

            modelBuilder.Entity<GameTeam>(entity =>
            {
                entity.HasKey(e => new { e.GameId, e.TeamId })
                    .HasName("GameTeam_pkey");

                entity.ToTable("GameTeam");

                entity.HasIndex(e => new { e.GameId, e.IsHome }, "GameTeam_gameId_isHome_key")
                    .IsUnique();

                entity.Property(e => e.GameId).HasColumnName("gameId");

                entity.Property(e => e.TeamId).HasColumnName("teamId");

                entity.Property(e => e.IsHome).HasColumnName("isHome");

                entity.Property(e => e.QuarterScores).HasColumnName("quarterScores");

                entity.HasOne(d => d.Game)
                    .WithMany(p => p.GameTeams)
                    .HasForeignKey(d => d.GameId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("GameTeam_gameId_fkey");

                entity.HasOne(d => d.Team)
                    .WithMany(p => p.GameTeams)
                    .HasForeignKey(d => d.TeamId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("GameTeam_teamId_fkey");
            });

            modelBuilder.Entity<GameTeamStats>(entity =>
            {
                entity.HasKey(e => new { e.GameId, e.TeamId })
                    .HasName("GameTeamStats_pkey");

                entity.Property(e => e.GameId).HasColumnName("gameId");

                entity.Property(e => e.TeamId).HasColumnName("teamId");

                entity.Property(e => e.FgAttempts).HasColumnName("fgAttempts");

                entity.Property(e => e.FgMakes).HasColumnName("fgMakes");

                entity.Property(e => e.Fumbles).HasColumnName("fumbles");

                entity.Property(e => e.Interceptions).HasColumnName("interceptions");

                entity.Property(e => e.PassYds).HasColumnName("passYds");

                entity.Property(e => e.RushYds).HasColumnName("rushYds");

                entity.Property(e => e.TimeOfPossession).HasColumnName("timeOfPossession");

                entity.HasOne(d => d.GameTeam)
                    .WithOne(p => p.GameTeamStats)
                    .HasForeignKey<GameTeamStats>(d => new { d.GameId, d.TeamId })
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("GameTeamStats_gameId_teamId_fkey");
            });

            modelBuilder.Entity<GameThread>(entity =>
            {
                entity.ToTable("GameThread");

                entity.Property(e => e.Id)
                    .HasMaxLength(20)
                    .HasColumnName("id");

                entity.Property(e => e.EndTime)
                    .HasColumnType("timestamp(3) without time zone")
                    .HasColumnName("endTime");

                entity.Property(e => e.GameId).HasColumnName("gameId");

                entity.Property(e => e.IsLive).HasColumnName("isLive");

                entity.Property(e => e.StartTime)
                    .HasColumnType("timestamp(3) without time zone")
                    .HasColumnName("startTime");

                entity.HasOne(d => d.Game)
                    .WithMany(p => p.GameThreads)
                    .HasForeignKey(d => d.GameId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("GameThread_gameId_fkey");
            });

            modelBuilder.Entity<GameThreadTeam>(entity =>
            {
                entity.HasKey(e => new { e.GameId, e.TeamId, e.ThreadId })
                    .HasName("GameThreadTeam_pkey");

                entity.ToTable("GameThreadTeam");

                entity.HasIndex(e => new { e.GameId, e.TeamId }, "GameThreadTeam_gameId_teamId_key")
                    .IsUnique();

                entity.Property(e => e.DefenseScheme).HasColumnName("defenseScheme");

                entity.Property(e => e.GameId).HasColumnName("gameId");
                
                entity.Property(e => e.OffenseScheme).HasColumnName("offenseScheme");

                entity.Property(e => e.TeamId).HasColumnName("teamId");

                entity.Property(e => e.ThreadId)
                    .HasMaxLength(20)
                    .HasColumnName("threadId");

                entity.HasOne(d => d.Thread)
                    .WithMany(p => p.GameThreadTeams)
                    .HasForeignKey(d => d.ThreadId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("GameThreadTeam_threadId_fkey");

                entity.HasOne(d => d.GameTeam)
                    .WithOne(p => p.GameThreadTeam)
                    .HasForeignKey<GameThreadTeam>(d => new { d.GameId, d.TeamId })
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("GameThreadTeam_gameId_teamId_fkey");
            });

            modelBuilder.Entity<Level>(entity =>
            {
                entity.ToTable("Level");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Abbreviation)
                    .HasMaxLength(10)
                    .HasColumnName("abbreviation");

                entity.Property(e => e.LevelName)
                    .HasMaxLength(255)
                    .HasColumnName("levelName");
            });

            modelBuilder.Entity<Play>(entity =>
            {
                entity.HasKey(e => new { e.ThreadId, e.PlayNo })
                    .HasName("Play_pkey");

                entity.ToTable("Play");

                entity.Property(e => e.ThreadId)
                    .HasMaxLength(20)
                    .HasColumnName("threadId");

                entity.Property(e => e.PlayNo).HasColumnName("playNo");

                entity.Property(e => e.Clock).HasColumnName("clock");

                entity.Property(e => e.CommentId)
                    .HasMaxLength(20)
                    .HasColumnName("commentId");

                entity.Property(e => e.DefCoachId).HasColumnName("defCoachId");

                entity.Property(e => e.DefNumber).HasColumnName("defNumber");

                entity.Property(e => e.DefNumberTime)
                    .HasColumnType("timestamp(3) without time zone")
                    .HasColumnName("defNumberTime");

                entity.Property(e => e.Distance).HasColumnName("distance");

                entity.Property(e => e.Down).HasColumnName("down");

                entity.Property(e => e.HomeOffense).HasColumnName("homeOffense");

                entity.Property(e => e.OffCoachId).HasColumnName("offCoachId");

                entity.Property(e => e.OffNumber).HasColumnName("offNumber");

                entity.Property(e => e.OffNumberTime)
                    .HasColumnType("timestamp(3) without time zone")
                    .HasColumnName("offNumberTime");

                entity.Property(e => e.PlayLength).HasColumnName("playLength");

                entity.Property(e => e.PlayType).HasColumnName("playType");

                entity.Property(e => e.Result).HasColumnName("result");

                entity.Property(e => e.Timeout).HasColumnName("timeout");

                entity.Property(e => e.Quarter).HasColumnName("quarter");

                entity.Property(e => e.YardLine).HasColumnName("yardLine");

                entity.Property(e => e.YardsGained).HasColumnName("yardsGained");

                entity.HasOne(d => d.DefCoach)
                    .WithMany(p => p.PlayDefCoaches)
                    .HasForeignKey(d => d.DefCoachId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("Play_defCoachId_fkey");

                entity.HasOne(d => d.OffCoach)
                    .WithMany(p => p.PlayOffCoaches)
                    .HasForeignKey(d => d.OffCoachId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("Play_offCoachId_fkey");

                entity.HasOne(d => d.Thread)
                    .WithMany(p => p.Plays)
                    .HasForeignKey(d => d.ThreadId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("Play_threadId_fkey");
            });

            modelBuilder.Entity<Season>(entity =>
            {
                entity.HasKey(e => e.SeasonNo)
                    .HasName("Season_pkey");

                entity.ToTable("Season");

                entity.Property(e => e.SeasonNo)
                    .ValueGeneratedNever()
                    .HasColumnName("seasonNo");
            });

            modelBuilder.Entity<Team>(entity =>
            {
                entity.ToTable("Team");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Abbreviation)
                    .HasMaxLength(10)
                    .HasColumnName("abbreviation");

                entity.Property(e => e.Color)
                    .HasMaxLength(7)
                    .HasColumnName("color")
                    .IsFixedLength();

                entity.Property(e => e.DivisionId).HasColumnName("divisionId");

                entity.Property(e => e.School)
                    .HasMaxLength(255)
                    .HasColumnName("school");

                entity.Property(e => e.ShortSchool)
                    .HasMaxLength(50)
                    .HasColumnName("shortSchool");

                entity.HasOne(d => d.Division)
                    .WithMany(p => p.Teams)
                    .HasForeignKey(d => d.DivisionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("Team_divisionId_fkey");
            });

            modelBuilder.Entity<TeamDivHistory>(entity =>
            {
                entity.HasKey(e => new { e.TeamId, e.DivisionId, e.SeasonNo })
                    .HasName("TeamDivHistory_pkey");

                entity.ToTable("TeamDivHistory");

                entity.Property(e => e.TeamId).HasColumnName("teamId");

                entity.Property(e => e.DivisionId).HasColumnName("divisionId");

                entity.Property(e => e.SeasonNo).HasColumnName("seasonNo");

                entity.HasOne(d => d.Division)
                    .WithMany(p => p.TeamDivHistories)
                    .HasForeignKey(d => d.DivisionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("TeamDivHistory_divisionId_fkey");

                entity.HasOne(d => d.SeasonNoNavigation)
                    .WithMany(p => p.TeamDivHistories)
                    .HasForeignKey(d => d.SeasonNo)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("TeamDivHistory_seasonNo_fkey");

                entity.HasOne(d => d.Team)
                    .WithMany(p => p.TeamDivHistories)
                    .HasForeignKey(d => d.TeamId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("TeamDivHistory_teamId_fkey");
            });

            modelBuilder.Entity<TeamMetricsGame>(entity =>
            {
                entity.HasKey(e => new { e.TeamId, e.GameId })
                    .HasName("TeamMetricsGame_pkey");

                entity.ToTable("TeamMetricsGame");

                entity.Property(e => e.TeamId).HasColumnName("teamId");

                entity.Property(e => e.GameId).HasColumnName("gameId");

                entity.Property(e => e.Elo).HasColumnName("elo");

                entity.Property(e => e.OldElo).HasColumnName("oldElo");

                entity.HasOne(d => d.GameTeam)
                    .WithMany(p => p.TeamMetricsGames)
                    .HasForeignKey(d => new { d.TeamId, d.GameId })
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("TeamMetricsGame_teamId_gameId_fkey");
            });

            modelBuilder.Entity<TeamMetricsSeason>(entity =>
            {
                entity.HasKey(e => new { e.TeamId, e.SeasonNo })
                    .HasName("TeamMetricsSeason_pkey");

                entity.ToTable("TeamMetricsSeason");

                entity.Property(e => e.TeamId).HasColumnName("teamId");

                entity.Property(e => e.SeasonNo).HasColumnName("seasonNo");

                entity.Property(e => e.Pn).HasColumnName("PN");

                entity.Property(e => e.WPn).HasColumnName("wPN");

                entity.HasOne(d => d.SeasonNoNavigation)
                    .WithMany(p => p.TeamMetricsSeasons)
                    .HasForeignKey(d => d.SeasonNo)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("TeamMetricsSeason_seasonNo_fkey");

                entity.HasOne(d => d.Team)
                    .WithMany(p => p.TeamMetricsSeasons)
                    .HasForeignKey(d => d.TeamId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("TeamMetricsSeason_teamId_fkey");
            });

            modelBuilder.Entity<Week>(entity =>
            {
                entity.HasKey(e => new { e.WeekNo, e.SeasonNo })
                    .HasName("Week_pkey");

                entity.ToTable("Week");

                entity.Property(e => e.WeekNo).HasColumnName("weekNo");

                entity.Property(e => e.SeasonNo).HasColumnName("seasonNo");

                entity.Property(e => e.WeekName)
                    .HasMaxLength(255)
                    .HasColumnName("weekName");

                entity.HasOne(d => d.SeasonNoNavigation)
                    .WithMany(p => p.Weeks)
                    .HasForeignKey(d => d.SeasonNo)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("Week_seasonNo_fkey");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
